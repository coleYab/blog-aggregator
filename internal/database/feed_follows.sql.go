// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feed_follows.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createFeedFollows = `-- name: CreateFeedFollows :one
INSERT INTO feed_follows (user_id, feed_id)
VALUES ($1, $2) RETURNING id, created_at, updated_at, user_id, feed_id
`

type CreateFeedFollowsParams struct {
	UserID uuid.UUID
	FeedID uuid.UUID
}

func (q *Queries) CreateFeedFollows(ctx context.Context, arg CreateFeedFollowsParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollows, arg.UserID, arg.FeedID)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const deleteFollowFeed = `-- name: DeleteFollowFeed :exec
DELETE FROM feed_follows
WHERE user_id=$1 and feed_id=$2
`

type DeleteFollowFeedParams struct {
	UserID uuid.UUID
	FeedID uuid.UUID
}

func (q *Queries) DeleteFollowFeed(ctx context.Context, arg DeleteFollowFeedParams) error {
	_, err := q.db.ExecContext(ctx, deleteFollowFeed, arg.UserID, arg.FeedID)
	return err
}

const getFeedByFeedIdAndUserId = `-- name: GetFeedByFeedIdAndUserId :one
SELECT id, created_at, updated_at, user_id, feed_id
FROM feed_follows
WHERE user_id=$1 and feed_id=$2
LIMIT 1
`

type GetFeedByFeedIdAndUserIdParams struct {
	UserID uuid.UUID
	FeedID uuid.UUID
}

func (q *Queries) GetFeedByFeedIdAndUserId(ctx context.Context, arg GetFeedByFeedIdAndUserIdParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, getFeedByFeedIdAndUserId, arg.UserID, arg.FeedID)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT feeds.id, feeds.created_at, feeds.updated_at, feeds.name, feeds.user_id, feeds.url, feeds.last_fetched_at
From
    feeds INNER JOIN
    feed_follows on feed_follows.feed_id = feeds.id
WHERE feed_follows.user_id = $1
`

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, userID uuid.UUID) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.UserID,
			&i.Url,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
